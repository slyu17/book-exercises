# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100, sep = ",")
employees
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
employees
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(100,40000,50000)
random_salaries
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjust <- runif(100,-5000,10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,random_salaries,salary_adjust)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries <- data.frame(salaries, salaries[random_salaries+salary_adjust])
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries <- data.frame(salaries, salary = salaries[random_salaries+salary_adjust])
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries <- data.frame(salaries, salary = salaries[[random_salaries+salary_adjust]])
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries <- data.frame(salaries, salary = salaries[["random_salaries"]]+salaries[["salary_adjust"]])
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries <- data.frame(salaries, raise = salaries[["salary"]] > salaries[["random_salaries"]])
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salary <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salary <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
raise <- salaries[["salary"]] > salaries[["random_salaries"]]
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salary <- random_salaries+salary_adjust
View(salaries)
source('~/Desktop/info200/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salary <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
raise <- salaries[["salary"]] > salaries[["random_salaries"]]
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salary <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
raise <- salaries[["salary"]] > salaries[["random_salaries"]]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,random_salaries,salary_adjust)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries[["salary"]] > salaries[["random_salaries"]]
View(salaries)
source('~/Desktop/info200/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries[["salary_2018"]] > salaries[["random_salaries"]]
# What was the 2018 salary of Employee 57
salaries[["Employee 57","salary_2018"]]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,random_salaries,salary_adjust)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries[["salary_2018"]] > salaries[["random_salaries"]]
# What was the 2018 salary of Employee 57
salaries[["Employee 57","salary_2018"]]
View(salaries)
# What was the 2018 salary of Employee 57
salaries[["Employee 57","salary_2018"]]
# What was the 2018 salary of Employee 57
salaries[[57,"salary_2018"]]
# What was the 2018 salary of Employee 57
salaries[57,"salary_2018"]
# How many employees got a raise?
length(salaries[raise])
# How many employees got a raise?
length(salaries[["raise"]])
# How many employees got a raise?
length(salaries[["raise"]]==TRUE)
# How many employees got a raise?
length(salaries[["raise"]]==TRUE)
# How many employees got a raise?
raised <- salaries[["raise"]])
# How many employees got a raise?
raised <- salaries[["raise"]]
length(raise(raised))
length(raised(raise))
length(raised == TRUE)
length(raised[TRUE])
length(raised[raised])
# What was the dollar value of the highest raise?
max(salaries[["salary_adjust"]])
# What was the dollar value of the highest raise?
max(salaries["salary_adjust"])
# How many employees got a raise?
raised <- salaries["raise"]
length(raised[raised])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise, "employees"]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries["salary_adjust"])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise, "employees"]
# What was the "name" of the employee who received the highest raise?
name <- salaries[salaries$salary_adjust == highest_raise, 1]
# How many employees got a raise?
raised <- salaries[["raise"]]
length(raised[raised])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries["salary_adjust"])
# What was the "name" of the employee who received the highest raise?
name <- salaries[salaries$salary_adjust == highest_raise, 1]
print(name)
# What was the "name" of the employee who received the highest raise?
name <- salaries[salaries$salary_adjust == highest_raise]
# What was the "name" of the employee who received the highest raise?
name <- salaries[salaries$salary_adjust == highest_raise,1]
print(name)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,1]
print(name)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,1]
View(salaries)
# What was the dollar value of the highest raise?
highest_raise <- max(salaries["salary_adjust"])
highest_raise
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the 2018 salary of Employee 57
salaries[57,"salary_2018"]
# What was the 2018 salary of Employee 57
salaries[57,"salary_2018"]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(100,40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjust <- runif(100,-5000,10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,random_salaries,salary_adjust)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries[["salary_2018"]] > salaries[["random_salaries"]]
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[57,"salary_2018"]
# How many employees got a raise?
raised <- salaries[["raise"]]
length(raised[raised])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries["salary_adjust"])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the "name" of the employee who received the highest raise?
name <- salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the "name" of the employee who received the highest raise?
name <- salaries[[salaries$salary_adjust == highest_raise,"employees"]]
# What was the "name" of the employee who received the highest raise?
name <- salaries[[salaries$salary_adjust == highest_raise,"employees"]]
# What was the "name" of the employee who received the highest raise?
[salaries$salary_adjust == highest_raise,"employees"]
# What was the "name" of the employee who received the highest raise?
[salaries$salary_adjust == highest_raise,"employees"]
# What was the "name" of the employee who received the highest raise?
salaries$salary_adjust == highest_raise,"employees"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- max(salaries["salary_adjust"])
# What was the largest decrease in salaries between the two years?
lowest_raise <- min(salaries["salary_adjust"])
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57","salary_2018"]
# How many employees got a raise?
raised <- salaries[["raise"]]
length(raised[raised])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries["salary_adjust"])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- min(salaries["salary_adjust"])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE], )
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the largest decrease in salaries between the two years?
min(salaries["salary_adjust"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- min(salaries["salary_adjust"])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,random_salaries,salary_adjust, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries[["random_salaries"]]+salaries[["salary_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries[["salary_2018"]] > salaries[["random_salaries"]]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57","salary_2018"]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries["salary_adjust"])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- min(salaries["salary_adjust"])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == highest_raise,"employees"]
# What was the average salary change?
average <- salaries$salary_adjust
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == lowest_raise,"employees"]
# What was the average salary change?
average <- salaries$salary_adjust
# What was the average salary change?
average <- mean(salaries$salary_adjust)
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries$salary_adjust<0)
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries$salary_adjust < 0)
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries[salary_adjust < 0])
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries[[salary_adjust < 0]])
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries$salary_adjust<0)
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries$salary_adjust > 0)
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries[salaries$salary_adjust < 0 , ])
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries[salaries$salary_adjust < 0 ,3 ])
# For people who did not get a raise, how much money did they lose on average?
lose_average <- mean(salaries[salaries$salary_adjust < 0 ,3 ])
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(file = data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(file = gate_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(file = data/gate_money.csv)
setwd("~/Desktop/info200/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(file = data/gate_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("data/gate_money.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info200/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("data/gate_money.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
file <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(file)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- file$organization
View(salaries)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
average <- mena(file$total_amount)
# What was the mean grant value?
average <- mean(file$total_amount)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
file <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(file)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- file$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
average <- mean(file$total_amount)
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# What was the dollar amount of the largest grant?
max <- max(file$total_amount)
# What was the dollar amount of the smallest grant?
min <- min(file$total_amount)
# Which organization received the largest grant?
file[file$total_amount == max, "organization"]
# Which organization received the smallest grant?
file[file$total_amount == min, "organization"]
# How many grants were awarded in 2010?
count <- length(file$grant_title)
